指定编译标准
gcc -pedantic -std=c89 1.c -o 1

16进制
printf("%x")



常量: 存在常量区   里面的值不能改变
变量: 具有特殊属性的存储单元


const int num=3    // const 修饰 变量名 可绕过变量名去访问

内存:
	常量区
	栈				局部变量
	堆
	代码段
	静态区			全局变量


基本类型: int char float enum

unsigned char num    // 0 - 255


num++     先运算再自加
++num     先自加再运算

逗号表达式: (... , ... , ...)
条件表达式: (... ? ... : ...)


强制类型转换:
	(类型) (表达式)

	赋值时两边的类型必须一致



----------------------------------------------------------
---------
| scanf |
---------

1.属性相同才匹配输入
  "%c,%d"   ---------> 输入时需要','

2.
  "%d"
  "%c"      ---------> 接受了上一个的'\n'
                       使用getchar()清除'\n'
----------------------------------------------------------



switch(表达式)
{
	case 常量表达式: 语句; break;
	case 常量表达式: 语句; break;
	case 常量表达式: 语句; break;
	default: 语句; break;
}


for(表达式;表达式;表达式;){
	语句;
	continue;   结束本次循环，其下面的语句不再执行
	break ;     跳出循环
}


while(){}
do{}while();

------------------------------------------------------------
数组

type 名[表达式]  // C89 C99
具有相同属性的元素的集合
数组具有连续性
地址是个整数
数组名是数组的首地址

段错误:  对内存地址的错误操作(程序猿)
没有越界检查

------------------------------------------------------------


警告：隐式声明与内建函数 '...' 不兼容   ------->  没有头文件


gets puts
strcpy
strcmp
strlen
strcat

-------------------------------------------------------------

二维数组：
    int arr[3][5];
	
	for(i = 0; i < row; i++)
		for(j = 0; j < col; j++)
			do_something(i);


    int arr[10];
	int* p = arr;    // arr <------>  &arr[0]
	                 // *p  <------>  arr[0] / *arr
	*(p+1);      // *(p+1) <------> *(arr+1) <---> arr[1]

	char arr[3][5] = {1,2,3,4,5};

	arr        一行

	&arr[0][0] |
	arr[0]     |---> 等价
	*arr       |

	// 地址
	*(arr+i)+j
	arr[i]+j

-------------------------------------------------------------

指针：

void* p3;		// ISO c89 c99 不支持void* 类型的指针变量自增

int* p = NULL;	// 空指针 0


char arr[10] = "abc";	// 栈
char *arr_1 = "abc";	// 常量区

int* arr_2 = (int*)arr_1;
arr_1++;	// 跳过1个字节
arr_2++;	// 跳过4个字节


char arr[10];
&arr+1	// 一维数组数组名取地址+1 跳过整个数组
		// ***数组名是一个常量地址***

sizeof( char(*)[5] ) = 4
sizeof( char* [5] ) = 20

-----------------------------------------------------------

const int *p 	// 不能改变p指向的值   修饰 *p
int const *p1


int* const p2	// p2本身不能改变   修饰 p2


const int* const p3		// 两者都不能改变

-----------------------------------------------------------

函数：

	type name(type name1, type name2, .....){
		语句;
	}

	实参给型参传值类型必须一致

	

-----------------------------------------------------------

数组指针:

int arr_1[3];
int (*arr)[3] = &arr_1;   // arr是指针，指向 int(*)[3] 的数组


int arr_2[5][3];
int (*arr)[3] = arr_2;



指针数组:

int* arr[3];
int** p = arr;

-----------------------------------------------------------

宏定义:
	#define 预处理阶段，机械的替换
	#undef  作用范围在 define 与 undef 之间

-----------------------------------------------------------

函数指针:

函数的函数名是一个常量地址


-----------------------------------------------------------

结构:

linux 系统中的 struct 是 1 2 4字节对齐


-----------------------------------------------------------
