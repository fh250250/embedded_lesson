
内嵌汇编

__asm__(
	汇编指令
	输出部分
	输入部分
	破坏部分
);

汇编指令：每条指令以"\n\t"或者"\n"结束
输出部分：以":"开始，表示汇编输出
输入部分：以":"开始，表示汇编接受输入
破坏部分：以":"开始，表示指令中使用那些寄存器，是否改变了内存值
占位符：%0~%9，分别代表第一个到第十个出现的C语言变量

限定符：
		r, 分配通用寄存器
		=, 表示只写
		+, 表示读写



后缀:
eq   ==
ne   !=
lt   <
le   <=
gt   >
ge   >=


@ r1地址处的数据放到r0
ldr r0, [r1]

ldr r0, [r1, #4]  @ r0 = *(r1 + 4)

ldr r0, [r1, #4]! @ r0 = *(r1 + 4), r1 = r1 + 4

ldr r0, [r1], #4  @ r0 = *r1, r1 = r1 + 4



ldrb / ldrh / ldr
strb / strh / str
1      2      4




APCS // arm process call standard

r0		a1-----> 参数传递,被调用过程不需要备份,返回值通过r0返回
r1		a2 |
r2		a3 |
r3		a4--

r4		v1-----------> 保存局部变量,被调用过程需要备份
r5		v2  |
r6		v3  |
r7		v4  |
r8		v5  |
r9		v6  |
r10		v7  |
r11		v8(fp)

r12		ip------> 存放临时值
r13		sp------> 栈指针
r14		lr------> 链接寄存器
r15		pc------> 程序计数器


栈：
	满栈
	空栈
	ldm/stm
	fa, 满递增
	fd, 满递减
	ea, 空递增
	ed, 空递减


stmfd sp!, {register_list}
// 实现
ldmfd sp!, {register_list}



.section			定义段
.global				声明全局符号
.word				字
.byte				字节
.asciz				存放字符串
.ascii				存放字符数组
.equ name, value 	汇编宏定义
.align N			2^N对齐
