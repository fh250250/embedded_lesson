1. 实现一个带头单链表，存储5个学生的信息（id, age, sex, name）
	要求：
	（1 保存5个学生信息到硬盘上
	（2 打印5个学生信息
	（3 按ID号查找学生，并打印出学生信息

2. 实现单链表的若干操作：
	（1 根据键盘输入的字符序列建立无序单链表A（允许相同字符存在）
	（2 将单链表拆成两个链表B C，B链表中存储小写字母，C链表中存储大写字母
	（3 将B C链表中的字母按照升序排列（重复的字母去掉）
	（4 查询字符串中的所有字符是否有在链表B中的字符

3  N个人围成一圈，从一开始数，数到M的人退出，下一个人重新开始数，直到剩下最后一个人。
  要求： N M由键盘输入，使用带头的单循环链表实现

4 建立两个双循环链表：
   （4.1 将两个双循环链表链接成一个双循环链表。
   （4.2 将其中的一条双循环链表插在另一条链表的任意两个节点中间
   （4.3 将其中的一条双循环链表的某个节点取出来，插到另一条链表的某个节点后面。

5 实现一个简单的内存管理系统，使用双循环链表实现
 要求：
  1 申请链表有10个节点，每个节点的数据域存储10，表示管理10个存储单元
  2 申请内存时，将申请链表中的内存节点移到释放链表中，对申请的大小要求是大于0 即可
  3 申请时，要求从申请链表顺序遍历链表，如果申请大小小于申请链表中最大的内存节点中所管理的内存，则申请内存最大的节点，创建一个新的内存节点插入到释放链表中，将申请的内存移动到该节点中，剩余的内存仍留在申请链表的内存节点中，如果申请大小等于申请链表中某个内存节点所管理的内存时，则直接将这个内存结点从申请链表中的最大内存节点移动到释放链表中，剩余要申请的大小继续按照3的规则进行申请
  4 释放内存时，应输入第几次申请的，将该次所申请的内存归还给申请链表。
  5 不可使用标记位记录节点是第几次申请的，应引入一个记录链表来记录是第几次申请的。

 alloc_chain             page
-----------          ----------
|  head   |--------->|  head  | ....
|  remain |          | remain |
-----------          ----------


               -----------
mem_alloc ---> | pRecord |---
               | pmem    |  |
               -----------  |
                            |
record_chain                v
----------          ----------
| record | <------> | record | ....
----------          ----------
     |
     v
---------
| pPage | -------> ....
| num   |
---------


6. 实现小型计算器（用栈实现）

  例如：
    4+2×（3-4×2-1）/2
  提示：
    1. 可以使用两个栈，分别存储操作数和运算符
    2. 键盘输入字符串，从头遍历，遇到操作数，操作数入栈
    3. 遇到运算符，则判断当前运算符与栈顶运算符的优先级，当前运算符优先级高于栈顶运算符优先级则入栈，否则
       操作数和运算符出栈（两个操作数和一个运算符）并计算结果，将结果入栈，直到这个运算符满足入栈条件

7. 实现atoi函数
8. n!使用非递归
